// Code generated by counterfeiter. DO NOT EDIT.
package sshfakes

import (
	"database/sql"
	"sync"

	"github.com/pivotal-cf/mysql-v2-cli-plugin/service"
	"github.com/pivotal-cf/mysql-v2-cli-plugin/ssh"
)

type FakeDatabaseConnector struct {
	ConnStub        func(serviceInfo service.ServiceInfo, port int) *sql.DB
	connMutex       sync.RWMutex
	connArgsForCall []struct {
		serviceInfo service.ServiceInfo
		port        int
	}
	connReturns struct {
		result1 *sql.DB
	}
	connReturnsOnCall map[int]struct {
		result1 *sql.DB
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDatabaseConnector) Conn(serviceInfo service.ServiceInfo, port int) *sql.DB {
	fake.connMutex.Lock()
	ret, specificReturn := fake.connReturnsOnCall[len(fake.connArgsForCall)]
	fake.connArgsForCall = append(fake.connArgsForCall, struct {
		serviceInfo service.ServiceInfo
		port        int
	}{serviceInfo, port})
	fake.recordInvocation("Conn", []interface{}{serviceInfo, port})
	fake.connMutex.Unlock()
	if fake.ConnStub != nil {
		return fake.ConnStub(serviceInfo, port)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.connReturns.result1
}

func (fake *FakeDatabaseConnector) ConnCallCount() int {
	fake.connMutex.RLock()
	defer fake.connMutex.RUnlock()
	return len(fake.connArgsForCall)
}

func (fake *FakeDatabaseConnector) ConnArgsForCall(i int) (service.ServiceInfo, int) {
	fake.connMutex.RLock()
	defer fake.connMutex.RUnlock()
	return fake.connArgsForCall[i].serviceInfo, fake.connArgsForCall[i].port
}

func (fake *FakeDatabaseConnector) ConnReturns(result1 *sql.DB) {
	fake.ConnStub = nil
	fake.connReturns = struct {
		result1 *sql.DB
	}{result1}
}

func (fake *FakeDatabaseConnector) ConnReturnsOnCall(i int, result1 *sql.DB) {
	fake.ConnStub = nil
	if fake.connReturnsOnCall == nil {
		fake.connReturnsOnCall = make(map[int]struct {
			result1 *sql.DB
		})
	}
	fake.connReturnsOnCall[i] = struct {
		result1 *sql.DB
	}{result1}
}

func (fake *FakeDatabaseConnector) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.connMutex.RLock()
	defer fake.connMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDatabaseConnector) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ ssh.DatabaseConnector = new(FakeDatabaseConnector)
