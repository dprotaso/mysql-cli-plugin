// Code generated by counterfeiter. DO NOT EDIT.
package pluginfakes

import (
	"sync"

	"github.com/pivotal-cf/mysql-cli-plugin/plugin"
)

type FakeCFClient struct {
	CreateServiceInstanceStub        func(destPlan, recipientInstanceName string) error
	createServiceInstanceMutex       sync.RWMutex
	createServiceInstanceArgsForCall []struct {
		destPlan              string
		recipientInstanceName string
	}
	createServiceInstanceReturns struct {
		result1 error
	}
	createServiceInstanceReturnsOnCall map[int]struct {
		result1 error
	}
	BindServiceStub        func(appName, serviceName string) error
	bindServiceMutex       sync.RWMutex
	bindServiceArgsForCall []struct {
		appName     string
		serviceName string
	}
	bindServiceReturns struct {
		result1 error
	}
	bindServiceReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteAppStub        func(appName string) error
	deleteAppMutex       sync.RWMutex
	deleteAppArgsForCall []struct {
		appName string
	}
	deleteAppReturns struct {
		result1 error
	}
	deleteAppReturnsOnCall map[int]struct {
		result1 error
	}
	DumpLogsStub        func(appName string)
	dumpLogsMutex       sync.RWMutex
	dumpLogsArgsForCall []struct {
		appName string
	}
	PushAppStub        func(path, appName string) error
	pushAppMutex       sync.RWMutex
	pushAppArgsForCall []struct {
		path    string
		appName string
	}
	pushAppReturns struct {
		result1 error
	}
	pushAppReturnsOnCall map[int]struct {
		result1 error
	}
	RenameServiceStub        func(oldName, newName string) error
	renameServiceMutex       sync.RWMutex
	renameServiceArgsForCall []struct {
		oldName string
		newName string
	}
	renameServiceReturns struct {
		result1 error
	}
	renameServiceReturnsOnCall map[int]struct {
		result1 error
	}
	RunTaskStub        func(appName, command string) error
	runTaskMutex       sync.RWMutex
	runTaskArgsForCall []struct {
		appName string
		command string
	}
	runTaskReturns struct {
		result1 error
	}
	runTaskReturnsOnCall map[int]struct {
		result1 error
	}
	ServiceExistsStub        func(serviceName string) bool
	serviceExistsMutex       sync.RWMutex
	serviceExistsArgsForCall []struct {
		serviceName string
	}
	serviceExistsReturns struct {
		result1 bool
	}
	serviceExistsReturnsOnCall map[int]struct {
		result1 bool
	}
	StartAppStub        func(appName string) error
	startAppMutex       sync.RWMutex
	startAppArgsForCall []struct {
		appName string
	}
	startAppReturns struct {
		result1 error
	}
	startAppReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCFClient) CreateServiceInstance(destPlan string, recipientInstanceName string) error {
	fake.createServiceInstanceMutex.Lock()
	ret, specificReturn := fake.createServiceInstanceReturnsOnCall[len(fake.createServiceInstanceArgsForCall)]
	fake.createServiceInstanceArgsForCall = append(fake.createServiceInstanceArgsForCall, struct {
		destPlan              string
		recipientInstanceName string
	}{destPlan, recipientInstanceName})
	fake.recordInvocation("CreateServiceInstance", []interface{}{destPlan, recipientInstanceName})
	fake.createServiceInstanceMutex.Unlock()
	if fake.CreateServiceInstanceStub != nil {
		return fake.CreateServiceInstanceStub(destPlan, recipientInstanceName)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.createServiceInstanceReturns.result1
}

func (fake *FakeCFClient) CreateServiceInstanceCallCount() int {
	fake.createServiceInstanceMutex.RLock()
	defer fake.createServiceInstanceMutex.RUnlock()
	return len(fake.createServiceInstanceArgsForCall)
}

func (fake *FakeCFClient) CreateServiceInstanceArgsForCall(i int) (string, string) {
	fake.createServiceInstanceMutex.RLock()
	defer fake.createServiceInstanceMutex.RUnlock()
	return fake.createServiceInstanceArgsForCall[i].destPlan, fake.createServiceInstanceArgsForCall[i].recipientInstanceName
}

func (fake *FakeCFClient) CreateServiceInstanceReturns(result1 error) {
	fake.CreateServiceInstanceStub = nil
	fake.createServiceInstanceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) CreateServiceInstanceReturnsOnCall(i int, result1 error) {
	fake.CreateServiceInstanceStub = nil
	if fake.createServiceInstanceReturnsOnCall == nil {
		fake.createServiceInstanceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createServiceInstanceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) BindService(appName string, serviceName string) error {
	fake.bindServiceMutex.Lock()
	ret, specificReturn := fake.bindServiceReturnsOnCall[len(fake.bindServiceArgsForCall)]
	fake.bindServiceArgsForCall = append(fake.bindServiceArgsForCall, struct {
		appName     string
		serviceName string
	}{appName, serviceName})
	fake.recordInvocation("BindService", []interface{}{appName, serviceName})
	fake.bindServiceMutex.Unlock()
	if fake.BindServiceStub != nil {
		return fake.BindServiceStub(appName, serviceName)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.bindServiceReturns.result1
}

func (fake *FakeCFClient) BindServiceCallCount() int {
	fake.bindServiceMutex.RLock()
	defer fake.bindServiceMutex.RUnlock()
	return len(fake.bindServiceArgsForCall)
}

func (fake *FakeCFClient) BindServiceArgsForCall(i int) (string, string) {
	fake.bindServiceMutex.RLock()
	defer fake.bindServiceMutex.RUnlock()
	return fake.bindServiceArgsForCall[i].appName, fake.bindServiceArgsForCall[i].serviceName
}

func (fake *FakeCFClient) BindServiceReturns(result1 error) {
	fake.BindServiceStub = nil
	fake.bindServiceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) BindServiceReturnsOnCall(i int, result1 error) {
	fake.BindServiceStub = nil
	if fake.bindServiceReturnsOnCall == nil {
		fake.bindServiceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.bindServiceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) DeleteApp(appName string) error {
	fake.deleteAppMutex.Lock()
	ret, specificReturn := fake.deleteAppReturnsOnCall[len(fake.deleteAppArgsForCall)]
	fake.deleteAppArgsForCall = append(fake.deleteAppArgsForCall, struct {
		appName string
	}{appName})
	fake.recordInvocation("DeleteApp", []interface{}{appName})
	fake.deleteAppMutex.Unlock()
	if fake.DeleteAppStub != nil {
		return fake.DeleteAppStub(appName)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.deleteAppReturns.result1
}

func (fake *FakeCFClient) DeleteAppCallCount() int {
	fake.deleteAppMutex.RLock()
	defer fake.deleteAppMutex.RUnlock()
	return len(fake.deleteAppArgsForCall)
}

func (fake *FakeCFClient) DeleteAppArgsForCall(i int) string {
	fake.deleteAppMutex.RLock()
	defer fake.deleteAppMutex.RUnlock()
	return fake.deleteAppArgsForCall[i].appName
}

func (fake *FakeCFClient) DeleteAppReturns(result1 error) {
	fake.DeleteAppStub = nil
	fake.deleteAppReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) DeleteAppReturnsOnCall(i int, result1 error) {
	fake.DeleteAppStub = nil
	if fake.deleteAppReturnsOnCall == nil {
		fake.deleteAppReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteAppReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) DumpLogs(appName string) {
	fake.dumpLogsMutex.Lock()
	fake.dumpLogsArgsForCall = append(fake.dumpLogsArgsForCall, struct {
		appName string
	}{appName})
	fake.recordInvocation("DumpLogs", []interface{}{appName})
	fake.dumpLogsMutex.Unlock()
	if fake.DumpLogsStub != nil {
		fake.DumpLogsStub(appName)
	}
}

func (fake *FakeCFClient) DumpLogsCallCount() int {
	fake.dumpLogsMutex.RLock()
	defer fake.dumpLogsMutex.RUnlock()
	return len(fake.dumpLogsArgsForCall)
}

func (fake *FakeCFClient) DumpLogsArgsForCall(i int) string {
	fake.dumpLogsMutex.RLock()
	defer fake.dumpLogsMutex.RUnlock()
	return fake.dumpLogsArgsForCall[i].appName
}

func (fake *FakeCFClient) PushApp(path string, appName string) error {
	fake.pushAppMutex.Lock()
	ret, specificReturn := fake.pushAppReturnsOnCall[len(fake.pushAppArgsForCall)]
	fake.pushAppArgsForCall = append(fake.pushAppArgsForCall, struct {
		path    string
		appName string
	}{path, appName})
	fake.recordInvocation("PushApp", []interface{}{path, appName})
	fake.pushAppMutex.Unlock()
	if fake.PushAppStub != nil {
		return fake.PushAppStub(path, appName)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.pushAppReturns.result1
}

func (fake *FakeCFClient) PushAppCallCount() int {
	fake.pushAppMutex.RLock()
	defer fake.pushAppMutex.RUnlock()
	return len(fake.pushAppArgsForCall)
}

func (fake *FakeCFClient) PushAppArgsForCall(i int) (string, string) {
	fake.pushAppMutex.RLock()
	defer fake.pushAppMutex.RUnlock()
	return fake.pushAppArgsForCall[i].path, fake.pushAppArgsForCall[i].appName
}

func (fake *FakeCFClient) PushAppReturns(result1 error) {
	fake.PushAppStub = nil
	fake.pushAppReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) PushAppReturnsOnCall(i int, result1 error) {
	fake.PushAppStub = nil
	if fake.pushAppReturnsOnCall == nil {
		fake.pushAppReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.pushAppReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RenameService(oldName string, newName string) error {
	fake.renameServiceMutex.Lock()
	ret, specificReturn := fake.renameServiceReturnsOnCall[len(fake.renameServiceArgsForCall)]
	fake.renameServiceArgsForCall = append(fake.renameServiceArgsForCall, struct {
		oldName string
		newName string
	}{oldName, newName})
	fake.recordInvocation("RenameService", []interface{}{oldName, newName})
	fake.renameServiceMutex.Unlock()
	if fake.RenameServiceStub != nil {
		return fake.RenameServiceStub(oldName, newName)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.renameServiceReturns.result1
}

func (fake *FakeCFClient) RenameServiceCallCount() int {
	fake.renameServiceMutex.RLock()
	defer fake.renameServiceMutex.RUnlock()
	return len(fake.renameServiceArgsForCall)
}

func (fake *FakeCFClient) RenameServiceArgsForCall(i int) (string, string) {
	fake.renameServiceMutex.RLock()
	defer fake.renameServiceMutex.RUnlock()
	return fake.renameServiceArgsForCall[i].oldName, fake.renameServiceArgsForCall[i].newName
}

func (fake *FakeCFClient) RenameServiceReturns(result1 error) {
	fake.RenameServiceStub = nil
	fake.renameServiceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RenameServiceReturnsOnCall(i int, result1 error) {
	fake.RenameServiceStub = nil
	if fake.renameServiceReturnsOnCall == nil {
		fake.renameServiceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.renameServiceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RunTask(appName string, command string) error {
	fake.runTaskMutex.Lock()
	ret, specificReturn := fake.runTaskReturnsOnCall[len(fake.runTaskArgsForCall)]
	fake.runTaskArgsForCall = append(fake.runTaskArgsForCall, struct {
		appName string
		command string
	}{appName, command})
	fake.recordInvocation("RunTask", []interface{}{appName, command})
	fake.runTaskMutex.Unlock()
	if fake.RunTaskStub != nil {
		return fake.RunTaskStub(appName, command)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.runTaskReturns.result1
}

func (fake *FakeCFClient) RunTaskCallCount() int {
	fake.runTaskMutex.RLock()
	defer fake.runTaskMutex.RUnlock()
	return len(fake.runTaskArgsForCall)
}

func (fake *FakeCFClient) RunTaskArgsForCall(i int) (string, string) {
	fake.runTaskMutex.RLock()
	defer fake.runTaskMutex.RUnlock()
	return fake.runTaskArgsForCall[i].appName, fake.runTaskArgsForCall[i].command
}

func (fake *FakeCFClient) RunTaskReturns(result1 error) {
	fake.RunTaskStub = nil
	fake.runTaskReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RunTaskReturnsOnCall(i int, result1 error) {
	fake.RunTaskStub = nil
	if fake.runTaskReturnsOnCall == nil {
		fake.runTaskReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.runTaskReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) ServiceExists(serviceName string) bool {
	fake.serviceExistsMutex.Lock()
	ret, specificReturn := fake.serviceExistsReturnsOnCall[len(fake.serviceExistsArgsForCall)]
	fake.serviceExistsArgsForCall = append(fake.serviceExistsArgsForCall, struct {
		serviceName string
	}{serviceName})
	fake.recordInvocation("ServiceExists", []interface{}{serviceName})
	fake.serviceExistsMutex.Unlock()
	if fake.ServiceExistsStub != nil {
		return fake.ServiceExistsStub(serviceName)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.serviceExistsReturns.result1
}

func (fake *FakeCFClient) ServiceExistsCallCount() int {
	fake.serviceExistsMutex.RLock()
	defer fake.serviceExistsMutex.RUnlock()
	return len(fake.serviceExistsArgsForCall)
}

func (fake *FakeCFClient) ServiceExistsArgsForCall(i int) string {
	fake.serviceExistsMutex.RLock()
	defer fake.serviceExistsMutex.RUnlock()
	return fake.serviceExistsArgsForCall[i].serviceName
}

func (fake *FakeCFClient) ServiceExistsReturns(result1 bool) {
	fake.ServiceExistsStub = nil
	fake.serviceExistsReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeCFClient) ServiceExistsReturnsOnCall(i int, result1 bool) {
	fake.ServiceExistsStub = nil
	if fake.serviceExistsReturnsOnCall == nil {
		fake.serviceExistsReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.serviceExistsReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeCFClient) StartApp(appName string) error {
	fake.startAppMutex.Lock()
	ret, specificReturn := fake.startAppReturnsOnCall[len(fake.startAppArgsForCall)]
	fake.startAppArgsForCall = append(fake.startAppArgsForCall, struct {
		appName string
	}{appName})
	fake.recordInvocation("StartApp", []interface{}{appName})
	fake.startAppMutex.Unlock()
	if fake.StartAppStub != nil {
		return fake.StartAppStub(appName)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.startAppReturns.result1
}

func (fake *FakeCFClient) StartAppCallCount() int {
	fake.startAppMutex.RLock()
	defer fake.startAppMutex.RUnlock()
	return len(fake.startAppArgsForCall)
}

func (fake *FakeCFClient) StartAppArgsForCall(i int) string {
	fake.startAppMutex.RLock()
	defer fake.startAppMutex.RUnlock()
	return fake.startAppArgsForCall[i].appName
}

func (fake *FakeCFClient) StartAppReturns(result1 error) {
	fake.StartAppStub = nil
	fake.startAppReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) StartAppReturnsOnCall(i int, result1 error) {
	fake.StartAppStub = nil
	if fake.startAppReturnsOnCall == nil {
		fake.startAppReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.startAppReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createServiceInstanceMutex.RLock()
	defer fake.createServiceInstanceMutex.RUnlock()
	fake.bindServiceMutex.RLock()
	defer fake.bindServiceMutex.RUnlock()
	fake.deleteAppMutex.RLock()
	defer fake.deleteAppMutex.RUnlock()
	fake.dumpLogsMutex.RLock()
	defer fake.dumpLogsMutex.RUnlock()
	fake.pushAppMutex.RLock()
	defer fake.pushAppMutex.RUnlock()
	fake.renameServiceMutex.RLock()
	defer fake.renameServiceMutex.RUnlock()
	fake.runTaskMutex.RLock()
	defer fake.runTaskMutex.RUnlock()
	fake.serviceExistsMutex.RLock()
	defer fake.serviceExistsMutex.RUnlock()
	fake.startAppMutex.RLock()
	defer fake.startAppMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCFClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ plugin.CFClient = new(FakeCFClient)
