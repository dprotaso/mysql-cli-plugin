// Code generated by counterfeiter. DO NOT EDIT.
package pluginfakes

import (
	"io"
	"sync"

	plugincli "code.cloudfoundry.org/cli/plugin"
	"github.com/pivotal-cf/mysql-cli-plugin/plugin"
)

type FakeConnectionWrapper struct {
	IsSpaceDeveloperStub        func(plugincli.CliConnection) (bool, error)
	isSpaceDeveloperMutex       sync.RWMutex
	isSpaceDeveloperArgsForCall []struct {
		arg1 plugincli.CliConnection
	}
	isSpaceDeveloperReturns struct {
		result1 bool
		result2 error
	}
	isSpaceDeveloperReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	UnpackAssetsStub        func() (assetDir string, err error)
	unpackAssetsMutex       sync.RWMutex
	unpackAssetsArgsForCall []struct{}
	unpackAssetsReturns     struct {
		result1 string
		result2 error
	}
	unpackAssetsReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	PushAppStub        func(connection plugincli.CliConnection, assetDir string) (appName string, err error)
	pushAppMutex       sync.RWMutex
	pushAppArgsForCall []struct {
		connection plugincli.CliConnection
		assetDir   string
	}
	pushAppReturns struct {
		result1 string
		result2 error
	}
	pushAppReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	ExecuteMigrateTaskStub        func(connection plugincli.CliConnection, appName, sourceServiceName, destinationServiceName string) (state string, err error)
	executeMigrateTaskMutex       sync.RWMutex
	executeMigrateTaskArgsForCall []struct {
		connection             plugincli.CliConnection
		appName                string
		sourceServiceName      string
		destinationServiceName string
	}
	executeMigrateTaskReturns struct {
		result1 string
		result2 error
	}
	executeMigrateTaskReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	ShowRecentLogsStub        func(connection plugincli.CliConnection, writer io.Writer) error
	showRecentLogsMutex       sync.RWMutex
	showRecentLogsArgsForCall []struct {
		connection plugincli.CliConnection
		writer     io.Writer
	}
	showRecentLogsReturns struct {
		result1 error
	}
	showRecentLogsReturnsOnCall map[int]struct {
		result1 error
	}
	CleanupStub        func(connection plugincli.CliConnection) error
	cleanupMutex       sync.RWMutex
	cleanupArgsForCall []struct {
		connection plugincli.CliConnection
	}
	cleanupReturns struct {
		result1 error
	}
	cleanupReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeConnectionWrapper) IsSpaceDeveloper(arg1 plugincli.CliConnection) (bool, error) {
	fake.isSpaceDeveloperMutex.Lock()
	ret, specificReturn := fake.isSpaceDeveloperReturnsOnCall[len(fake.isSpaceDeveloperArgsForCall)]
	fake.isSpaceDeveloperArgsForCall = append(fake.isSpaceDeveloperArgsForCall, struct {
		arg1 plugincli.CliConnection
	}{arg1})
	fake.recordInvocation("IsSpaceDeveloper", []interface{}{arg1})
	fake.isSpaceDeveloperMutex.Unlock()
	if fake.IsSpaceDeveloperStub != nil {
		return fake.IsSpaceDeveloperStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.isSpaceDeveloperReturns.result1, fake.isSpaceDeveloperReturns.result2
}

func (fake *FakeConnectionWrapper) IsSpaceDeveloperCallCount() int {
	fake.isSpaceDeveloperMutex.RLock()
	defer fake.isSpaceDeveloperMutex.RUnlock()
	return len(fake.isSpaceDeveloperArgsForCall)
}

func (fake *FakeConnectionWrapper) IsSpaceDeveloperArgsForCall(i int) plugincli.CliConnection {
	fake.isSpaceDeveloperMutex.RLock()
	defer fake.isSpaceDeveloperMutex.RUnlock()
	return fake.isSpaceDeveloperArgsForCall[i].arg1
}

func (fake *FakeConnectionWrapper) IsSpaceDeveloperReturns(result1 bool, result2 error) {
	fake.IsSpaceDeveloperStub = nil
	fake.isSpaceDeveloperReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeConnectionWrapper) IsSpaceDeveloperReturnsOnCall(i int, result1 bool, result2 error) {
	fake.IsSpaceDeveloperStub = nil
	if fake.isSpaceDeveloperReturnsOnCall == nil {
		fake.isSpaceDeveloperReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.isSpaceDeveloperReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeConnectionWrapper) UnpackAssets() (assetDir string, err error) {
	fake.unpackAssetsMutex.Lock()
	ret, specificReturn := fake.unpackAssetsReturnsOnCall[len(fake.unpackAssetsArgsForCall)]
	fake.unpackAssetsArgsForCall = append(fake.unpackAssetsArgsForCall, struct{}{})
	fake.recordInvocation("UnpackAssets", []interface{}{})
	fake.unpackAssetsMutex.Unlock()
	if fake.UnpackAssetsStub != nil {
		return fake.UnpackAssetsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.unpackAssetsReturns.result1, fake.unpackAssetsReturns.result2
}

func (fake *FakeConnectionWrapper) UnpackAssetsCallCount() int {
	fake.unpackAssetsMutex.RLock()
	defer fake.unpackAssetsMutex.RUnlock()
	return len(fake.unpackAssetsArgsForCall)
}

func (fake *FakeConnectionWrapper) UnpackAssetsReturns(result1 string, result2 error) {
	fake.UnpackAssetsStub = nil
	fake.unpackAssetsReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeConnectionWrapper) UnpackAssetsReturnsOnCall(i int, result1 string, result2 error) {
	fake.UnpackAssetsStub = nil
	if fake.unpackAssetsReturnsOnCall == nil {
		fake.unpackAssetsReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.unpackAssetsReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeConnectionWrapper) PushApp(connection plugincli.CliConnection, assetDir string) (appName string, err error) {
	fake.pushAppMutex.Lock()
	ret, specificReturn := fake.pushAppReturnsOnCall[len(fake.pushAppArgsForCall)]
	fake.pushAppArgsForCall = append(fake.pushAppArgsForCall, struct {
		connection plugincli.CliConnection
		assetDir   string
	}{connection, assetDir})
	fake.recordInvocation("PushApp", []interface{}{connection, assetDir})
	fake.pushAppMutex.Unlock()
	if fake.PushAppStub != nil {
		return fake.PushAppStub(connection, assetDir)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.pushAppReturns.result1, fake.pushAppReturns.result2
}

func (fake *FakeConnectionWrapper) PushAppCallCount() int {
	fake.pushAppMutex.RLock()
	defer fake.pushAppMutex.RUnlock()
	return len(fake.pushAppArgsForCall)
}

func (fake *FakeConnectionWrapper) PushAppArgsForCall(i int) (plugincli.CliConnection, string) {
	fake.pushAppMutex.RLock()
	defer fake.pushAppMutex.RUnlock()
	return fake.pushAppArgsForCall[i].connection, fake.pushAppArgsForCall[i].assetDir
}

func (fake *FakeConnectionWrapper) PushAppReturns(result1 string, result2 error) {
	fake.PushAppStub = nil
	fake.pushAppReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeConnectionWrapper) PushAppReturnsOnCall(i int, result1 string, result2 error) {
	fake.PushAppStub = nil
	if fake.pushAppReturnsOnCall == nil {
		fake.pushAppReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.pushAppReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeConnectionWrapper) ExecuteMigrateTask(connection plugincli.CliConnection, appName string, sourceServiceName string, destinationServiceName string) (state string, err error) {
	fake.executeMigrateTaskMutex.Lock()
	ret, specificReturn := fake.executeMigrateTaskReturnsOnCall[len(fake.executeMigrateTaskArgsForCall)]
	fake.executeMigrateTaskArgsForCall = append(fake.executeMigrateTaskArgsForCall, struct {
		connection             plugincli.CliConnection
		appName                string
		sourceServiceName      string
		destinationServiceName string
	}{connection, appName, sourceServiceName, destinationServiceName})
	fake.recordInvocation("ExecuteMigrateTask", []interface{}{connection, appName, sourceServiceName, destinationServiceName})
	fake.executeMigrateTaskMutex.Unlock()
	if fake.ExecuteMigrateTaskStub != nil {
		return fake.ExecuteMigrateTaskStub(connection, appName, sourceServiceName, destinationServiceName)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.executeMigrateTaskReturns.result1, fake.executeMigrateTaskReturns.result2
}

func (fake *FakeConnectionWrapper) ExecuteMigrateTaskCallCount() int {
	fake.executeMigrateTaskMutex.RLock()
	defer fake.executeMigrateTaskMutex.RUnlock()
	return len(fake.executeMigrateTaskArgsForCall)
}

func (fake *FakeConnectionWrapper) ExecuteMigrateTaskArgsForCall(i int) (plugincli.CliConnection, string, string, string) {
	fake.executeMigrateTaskMutex.RLock()
	defer fake.executeMigrateTaskMutex.RUnlock()
	return fake.executeMigrateTaskArgsForCall[i].connection, fake.executeMigrateTaskArgsForCall[i].appName, fake.executeMigrateTaskArgsForCall[i].sourceServiceName, fake.executeMigrateTaskArgsForCall[i].destinationServiceName
}

func (fake *FakeConnectionWrapper) ExecuteMigrateTaskReturns(result1 string, result2 error) {
	fake.ExecuteMigrateTaskStub = nil
	fake.executeMigrateTaskReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeConnectionWrapper) ExecuteMigrateTaskReturnsOnCall(i int, result1 string, result2 error) {
	fake.ExecuteMigrateTaskStub = nil
	if fake.executeMigrateTaskReturnsOnCall == nil {
		fake.executeMigrateTaskReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.executeMigrateTaskReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeConnectionWrapper) ShowRecentLogs(connection plugincli.CliConnection, writer io.Writer) error {
	fake.showRecentLogsMutex.Lock()
	ret, specificReturn := fake.showRecentLogsReturnsOnCall[len(fake.showRecentLogsArgsForCall)]
	fake.showRecentLogsArgsForCall = append(fake.showRecentLogsArgsForCall, struct {
		connection plugincli.CliConnection
		writer     io.Writer
	}{connection, writer})
	fake.recordInvocation("ShowRecentLogs", []interface{}{connection, writer})
	fake.showRecentLogsMutex.Unlock()
	if fake.ShowRecentLogsStub != nil {
		return fake.ShowRecentLogsStub(connection, writer)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.showRecentLogsReturns.result1
}

func (fake *FakeConnectionWrapper) ShowRecentLogsCallCount() int {
	fake.showRecentLogsMutex.RLock()
	defer fake.showRecentLogsMutex.RUnlock()
	return len(fake.showRecentLogsArgsForCall)
}

func (fake *FakeConnectionWrapper) ShowRecentLogsArgsForCall(i int) (plugincli.CliConnection, io.Writer) {
	fake.showRecentLogsMutex.RLock()
	defer fake.showRecentLogsMutex.RUnlock()
	return fake.showRecentLogsArgsForCall[i].connection, fake.showRecentLogsArgsForCall[i].writer
}

func (fake *FakeConnectionWrapper) ShowRecentLogsReturns(result1 error) {
	fake.ShowRecentLogsStub = nil
	fake.showRecentLogsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeConnectionWrapper) ShowRecentLogsReturnsOnCall(i int, result1 error) {
	fake.ShowRecentLogsStub = nil
	if fake.showRecentLogsReturnsOnCall == nil {
		fake.showRecentLogsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.showRecentLogsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeConnectionWrapper) Cleanup(connection plugincli.CliConnection) error {
	fake.cleanupMutex.Lock()
	ret, specificReturn := fake.cleanupReturnsOnCall[len(fake.cleanupArgsForCall)]
	fake.cleanupArgsForCall = append(fake.cleanupArgsForCall, struct {
		connection plugincli.CliConnection
	}{connection})
	fake.recordInvocation("Cleanup", []interface{}{connection})
	fake.cleanupMutex.Unlock()
	if fake.CleanupStub != nil {
		return fake.CleanupStub(connection)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.cleanupReturns.result1
}

func (fake *FakeConnectionWrapper) CleanupCallCount() int {
	fake.cleanupMutex.RLock()
	defer fake.cleanupMutex.RUnlock()
	return len(fake.cleanupArgsForCall)
}

func (fake *FakeConnectionWrapper) CleanupArgsForCall(i int) plugincli.CliConnection {
	fake.cleanupMutex.RLock()
	defer fake.cleanupMutex.RUnlock()
	return fake.cleanupArgsForCall[i].connection
}

func (fake *FakeConnectionWrapper) CleanupReturns(result1 error) {
	fake.CleanupStub = nil
	fake.cleanupReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeConnectionWrapper) CleanupReturnsOnCall(i int, result1 error) {
	fake.CleanupStub = nil
	if fake.cleanupReturnsOnCall == nil {
		fake.cleanupReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.cleanupReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeConnectionWrapper) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.isSpaceDeveloperMutex.RLock()
	defer fake.isSpaceDeveloperMutex.RUnlock()
	fake.unpackAssetsMutex.RLock()
	defer fake.unpackAssetsMutex.RUnlock()
	fake.pushAppMutex.RLock()
	defer fake.pushAppMutex.RUnlock()
	fake.executeMigrateTaskMutex.RLock()
	defer fake.executeMigrateTaskMutex.RUnlock()
	fake.showRecentLogsMutex.RLock()
	defer fake.showRecentLogsMutex.RUnlock()
	fake.cleanupMutex.RLock()
	defer fake.cleanupMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeConnectionWrapper) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ plugin.ConnectionWrapper = new(FakeConnectionWrapper)
